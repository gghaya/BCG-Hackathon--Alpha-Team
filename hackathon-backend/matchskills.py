import google.generativeai as genai
import os
os.environ["GOOGLE_API_KEY"] = "AIzaSyCAePlqabCS1iBOlSBGSGtxKrOZ1I2lWKQ"  # Use environment variables for production
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")  # Use environment variable for API key
genai.configure(api_key=GOOGLE_API_KEY)


# --- Gemini Skill Matching Function ---
def compare_skills_with_gemini(job_description, candidate_skills):
    prompt = f"""
You are an AI assistant helping recruiters match job requirements with candidate skills.

Here is a job description:
{job_description}

Here are the candidate's skills:
{candidate_skills}

Return only this JSON format:
{{
  "missing_skills": ["skill1", "skill2"],
  "extra_skills": ["skill3", "skill4"]
}}
"""
    model = genai.GenerativeModel("models/gemini-1.5-pro")
    response = model.generate_content(prompt)
    raw = response.text.strip()

    try:
        raw_clean = re.sub(r"```json|```", "", raw)
        parsed = json.loads(raw_clean)
        return parsed.get("missing_skills", []), parsed.get("extra_skills", [])
    except Exception as e:
        print("Gemini JSON parse error:", e)
        return [], []



def extract_skills_from_job_description_with_gemini(description):
    """Extract a list of skills from a job description using Google Gemini."""
    prompt = f"""
    Extract only the core technicaland soft skills mentioned in the following job description. 
    Return the result as a JSON array of skill keywords (no explanation or extra text).

    Job Description:
    {description}

    JSON format:
    {{
      "skills": ["skill1", "skill2", "skill3", ...]
    }}
    """

    model = genai.GenerativeModel("models/gemini-1.5-pro")
    response = model.generate_content(prompt)
    
    print("üîç Raw Gemini Response:", response.text)
    
    # Optionally parse the JSON
    try:
        import json
        parsed = json.loads(response.text)
        return parsed.get("skills", [])
    except Exception as e:
        print("‚ö†Ô∏è Failed to parse skills JSON:", e)
        return []

def match_skills_with_gemini(job_description, candidate_skills):
    prompt = f"""
You are an AI assistant helping recruiters match job requirements with candidate skills.

Here is a job description:
{job_description}

And here are the candidate's skills:
{candidate_skills}

Please compare the job-required skills with the candidate's skills and return:
1. 'missing_skills': skills required by the job but not found in the candidate's list
2. 'extra_skills': skills the candidate has but are not required by the job

Return only this JSON format:

{{
  "missing_skills": ["skill1", "skill2"],
  "extra_skills": ["skill3", "skill4"]
}}
"""
    model = genai.GenerativeModel("models/gemini-1.5-pro")
    response = model.generate_content(prompt)

    raw = response.text.strip()
    print("üß† Raw Comparison Response:", repr(raw))

    try:
        import json, re
        raw_clean = re.sub(r"```json|```", "", raw)
        parsed = json.loads(raw_clean)
        return parsed.get("missing_skills", []), parsed.get("extra_skills", [])
    except Exception as e:
        print("‚ö†Ô∏è JSON Parse Failed:", e)
        return [], []

test_description = """Au sein des √©quipes R&D Produits et CloudOps IT, le d√©veloppeur a pour mission de concevoir, d√©velopper et maintenir des applications logicielles en utilisant lesmeilleures pratiques de programmation. Il doit collaborer avec les √©quipes pourassurer la qualit√©, la performance et la livraison efficace des projets, autour d‚Äôune sonde d'analyse de trafic IP.



A cette fin, ses missions principales sont les suivantes :

D√©veloppement de Logiciels
D√©velopper et maintenir le produit, en l'adaptant aux √©volutions constantes des protocoles et des applications utilisant les r√©seaux IP
√âcrire du code propre, modulaire, √©volutif et bien document√©.
Participer aux revues de code et assurer la qualit√© du code produit.
Am√©liorer le produit au niveau technique (optimisations, refactoring etc).
Am√©liorer le produit par l'ajout de nouvelles fonctionnalit√©s : Rechercher (par exemple en analysant des captures r√©seau, par du reverse engineering ou dela veille technologique) des moyens d‚Äôextraire de nouvelles informations pertinentes de flux r√©seaux de plus en plus chiffr√©s (pouvant par exemple faire appel au Machine Learning etc).
2.Analyse et Conception

Analyser les besoins des utilisateurs, proposer des solutions techniques adapt√©es et chiffrer la r√©alisation
Collaborer avec les √©quipes pour cr√©er des interfaces utilisateur intuitives et fonctionnelles.


3.Tests et D√©bogage

Effectuer des tests unitaires, d'int√©gration et fonctionnels pour garantir la qualit√© et la performance des applications.
D√©tecter, analyser et corriger les bugs et les dysfonctionnements.


4.Collaboration Inter-√©quipes

Travailler en √©troite collaboration avec les √©quipes de d√©veloppement et produit.
Participer aux r√©unions Agile/Scrum pour aligner les objectifs et les priorit√©s.


5.Maintenance et Support

Assurer la maintenance des applications existantes en r√©ponse aux √©volutions des besoins et aux retours des utilisateurs.
Mettre √† jour la documentation technique


6.Veille Technologique

Se tenir inform√© des √©volutions technologiques et des bonnespratiques de d√©veloppement.
Proposer et int√©grer de nouvelles technologies et m√©thodologies pour am√©liorer les performances des applications."""
# skills = extract_skills_from_job_description_with_gemini(test_description)
# match = match_skills_with_gemini("""Machine Learning,
#     Data Analytics,
#     Project Management,
#     Software Development,
#     Agile Methodology,
#     Business Growth""", test_description)
# print("üéØ Extracted Skills:", (skills))